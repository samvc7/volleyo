generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  username  String?    @unique
  password  String?
  firstName String     @map("first_name")
  lastName  String     @map("last_name")
  role      UserRole   @default(USER)
  authToken AuthToken?
  accounts  Account[]
  members   Member[]
  sessions  Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model AuthToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String   @unique
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id])
}

model Member {
  id        String    @id @default(cuid())
  email     String?
  firstName String    @map("first_name")
  lastName  String    @map("last_name")
  nickName  String?   @map("nick_name")
  createdAt DateTime  @default(now()) @map("created_at")
  birthday  DateTime?

  userId    String?
  user      User?        @relation(fields: [userId], references: [id])
  teams     TeamMember[]
  attendees Attendee[]
}

model Team {
  id          String       @id @default(cuid())
  slug        String       @unique
  name        String
  description String?
  games       Game[]
  members     TeamMember[]
}

model TeamMember {
  memberId    String
  teamId      String
  roles       TeamRole[]
  memberSince DateTime?  @default(now()) @map("created_at")
  removedAt   DateTime?  @map("removed_at")
  member      Member     @relation(fields: [memberId], references: [id])
  team        Team       @relation(fields: [teamId], references: [id])

  @@id([memberId, teamId])
  @@map("TeamMember")
}

model Game {
  id            String     @id @default(cuid())
  slug          String     @unique
  title         String
  description   String?
  location      String?
  date          DateTime
  teamId        String?
  opponentName  String?
  teamScore     Int?
  opponentScore Int?
  team          Team?      @relation(fields: [teamId], references: [id])
  attendees     Attendee[]
}

model Attendee {
  id           String      @id @default(cuid())
  playerNumber Int?
  positions    Position[]
  status       String      @default("PENDING")
  statistics   Statistics?

  gameId   String
  memberId String
  game     Game   @relation(fields: [gameId], references: [id])
  member   Member @relation(fields: [memberId], references: [id])
}

model Statistics {
  id                String @id @default(cuid())
  kills             Int?
  attackErrors      Int?   @map("attack_errors")
  attackAttempts    Int?   @map("attack_attempts")
  attackEfficiency  Float? @map("attack_efficiency")
  killsPerSet       Float? @map("kills_per_set")
  serveAces         Int?   @map("serve_aces")
  serveErrors       Int?   @map("serve_errors")
  serveAttempts     Int?   @map("serve_attempts")
  servePercentage   Float? @map("serve_percentage")
  serveEfficiency   Float? @map("serve_efficiency")
  serveRating       Float? @map("serve_rating")
  receivePerfect    Int?   @map("receive_perfect")
  receivePositive   Int?   @map("receive_positive")
  receiveNegative   Int?   @map("receive_negative")
  receiveError      Int?   @map("receive_error")
  receiveAttempts   Int?   @map("receive_attempts")
  receivePercentage Float? @map("receive_percentage")
  setAssists        Int?   @map("set_assists")
  setsTotal         Int?   @map("sets_total")
  setErrors         Int?   @map("set_errors")
  digs              Int?   @map("digs")
  digErrors         Int?   @map("dig_errors")
  blockSingle       Int?   @map("block_single")
  blockMultiple     Int?   @map("block_multiple")
  blockErrors       Int?   @map("block_errors")
  blocksPerSet      Float? @map("blocks_per_set")
  setsPlayed        Int?   @map("sets_played")

  attendeeId String   @unique
  attendee   Attendee @relation(fields: [attendeeId], references: [id])
}

enum Position {
  OUTSIDE_HITTER
  OPPOSITE
  MIDDLE_BLOCKER
  SETTER
  LIBERO
}

enum UserRole {
  USER
  GUEST
}

enum TeamRole {
  ADMIN
  MEMBER
}

enum AttendeeStatus {
  PENDING
  ACCEPTED
  DECLINED
}
